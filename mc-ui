#!/bin/bash

# Minecraft Server Management Script
VERSION="1.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/config.conf"
BACKUP_DIR="$SCRIPT_DIR/backups"
SERVER_DIR="$SCRIPT_DIR/server"
WEB_DIR="$SCRIPT_DIR/web"
LOG_FILE="$SCRIPT_DIR/mc-ui.log"

# Default configuration
JAVA_VERSION="17"
MIN_RAM="1G"
MAX_RAM="4G"
SERVER_PORT=25565
WEB_PORT=8080

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
    echo -e "$1"
}

# Check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        log "${RED}Please run as root${NC}"
        exit 1
    fi
}

# System requirements check
check_system() {
    log "Checking system requirements..."
    
    # Check CPU
    CPU_CORES=$(nproc)
    CPU_MODEL=$(cat /proc/cpuinfo | grep "model name" | head -n1 | cut -d ":" -f2 | sed 's/^[ \t]*//')
    
    # Check RAM
    TOTAL_RAM=$(free -h | awk '/^Mem:/ {print $2}')
    FREE_RAM=$(free -h | awk '/^Mem:/ {print $4}')
    
    # Check Storage
    TOTAL_STORAGE=$(df -h / | awk 'NR==2 {print $2}')
    FREE_STORAGE=$(df -h / | awk 'NR==2 {print $4}')
    
    echo -e "\n${GREEN}System Information:${NC}"
    echo -e "CPU: $CPU_MODEL ($CPU_CORES cores)"
    echo -e "RAM: $TOTAL_RAM (Free: $FREE_RAM)"
    echo -e "Storage: $TOTAL_STORAGE (Free: $FREE_STORAGE)"
}

# Install required packages
install_requirements() {
    log "Installing requirements..."
    
    # Update package list
    apt-get update
    
    # Install Java
    apt-get install -y openjdk-${JAVA_VERSION}-jre-headless
    
    # Install required utilities
    apt-get install -y screen wget unzip nginx
    
    # Create required directories
    mkdir -p "$SERVER_DIR" "$BACKUP_DIR" "$WEB_DIR"
}

# Install Minecraft server
install_server() {
    log "Installing Minecraft server..."
    
    cd "$SERVER_DIR"
    
    # Download latest server jar
    wget -O server.jar "https://launcher.mojang.com/v1/objects/c8f83c5655308435b3dcf03c06d9fe8740a77469/server.jar"
    
    # Create eula.txt
    echo "eula=true" > eula.txt
    
    # Create server.properties with basic configuration
    cat > server.properties << EOF
server-port=${SERVER_PORT}
gamemode=survival
difficulty=normal
max-players=20
white-list=false
spawn-protection=16
EOF

    log "${GREEN}Server installation complete${NC}"
}

# Start server
start_server() {
    if ! screen -list | grep -q "minecraft"; then
        cd "$SERVER_DIR"
        screen -dmS minecraft java -Xms${MIN_RAM} -Xmx${MAX_RAM} -jar server.jar nogui
        log "${GREEN}Server started${NC}"
    else
        log "${YELLOW}Server is already running${NC}"
    fi
}

# Stop server
stop_server() {
    if screen -list | grep -q "minecraft"; then
        screen -S minecraft -X stuff "stop\n"
        sleep 10
        log "${GREEN}Server stopped${NC}"
    else
        log "${YELLOW}Server is not running${NC}"
    fi
}

# Create backup
create_backup() {
    local BACKUP_NAME="minecraft_backup_$(date +%Y%m%d_%H%M%S).tar.gz"
    
    # Stop server if running
    stop_server
    
    # Create backup
    cd "$SERVER_DIR"
    tar -czf "$BACKUP_DIR/$BACKUP_NAME" ./*
    
    log "${GREEN}Backup created: $BACKUP_NAME${NC}"
    
    # Restart server
    start_server
}

# Restore backup
restore_backup() {
    local BACKUP_FILE="$1"
    
    if [ ! -f "$BACKUP_DIR/$BACKUP_FILE" ]; then
        log "${RED}Backup file not found${NC}"
        return 1
    fi
    
    # Stop server if running
    stop_server
    
    # Clear current server directory
    rm -rf "$SERVER_DIR"/*
    
    # Restore backup
    cd "$SERVER_DIR"
    tar -xzf "$BACKUP_DIR/$BACKUP_FILE"
    
    log "${GREEN}Backup restored: $BACKUP_FILE${NC}"
    
    # Restart server
    start_server
}

# Get server IP address
get_server_ip() {
    SERVER_IP=$(hostname -I | awk '{print $1}')
    if [ -z "$SERVER_IP" ]; then
        SERVER_IP="127.0.0.1"
    fi
}

# Setup web interface
setup_web_interface() {
    log "Setting up web interface..."
    get_server_ip
    
    # Ensure web directory exists and has correct permissions
    mkdir -p "$WEB_DIR"
    chown -R www-data:www-data "$WEB_DIR"
    chmod -R 755 "$WEB_DIR"

    # Create nginx configuration
    cat > /etc/nginx/sites-available/minecraft << EOF
server {
    listen 80;
    server_name $SERVER_IP;

    access_log /var/log/nginx/minecraft-access.log;
    error_log /var/log/nginx/minecraft-error.log;

    root ${WEB_DIR};
    index index.html;

    # API endpoints for server management
    location /api/ {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }

    location /server-properties {
        alias ${SERVER_DIR}/server.properties;
        default_type text/plain;
        auth_basic "Server Configuration";
        auth_basic_user_file /etc/nginx/.htpasswd;
    }

    location / {
        try_files \$uri \$uri/ =404;
        autoindex off;
    }
}
EOF

    # Create basic auth for server properties
    if [ ! -f /etc/nginx/.htpasswd ]; then
        apt-get install -y apache2-utils
        echo -n "Create admin password for web interface: "
        read -s ADMIN_PASS
        echo
        htpasswd -bc /etc/nginx/.htpasswd admin "$ADMIN_PASS"
    fi

    # Enable site and remove default if exists
    rm -f /etc/nginx/sites-enabled/default
    ln -sf /etc/nginx/sites-available/minecraft /etc/nginx/sites-enabled/

    # Test nginx configuration
    nginx -t

    if [ $? -eq 0 ]; then
        # Restart nginx
        systemctl restart nginx
        log "${GREEN}Web interface setup completed. Access it at http://${SERVER_IP}${NC}"
        
        # Check if nginx is running
        if ! systemctl is-active --quiet nginx; then
            log "${RED}Warning: nginx is not running. Starting nginx...${NC}"
            systemctl start nginx
        fi
        
        # Verify permissions
        chown -R www-data:www-data "$WEB_DIR"
        chmod -R 755 "$WEB_DIR"
    else
        log "${RED}Error: nginx configuration test failed${NC}"
        exit 1
    fi
}

# Uninstall everything
uninstall() {
    log "Starting uninstallation process..."
    
    # Stop server if running
    stop_server
    
    # Remove nginx configuration
    if [ -f /etc/nginx/sites-enabled/minecraft ]; then
        rm -f /etc/nginx/sites-enabled/minecraft
        rm -f /etc/nginx/sites-available/minecraft
        systemctl restart nginx
    fi
    
    # Remove Java if it was installed by us
    if dpkg -l | grep -q "openjdk-${JAVA_VERSION}-jre-headless"; then
        apt-get remove -y openjdk-${JAVA_VERSION}-jre-headless
    fi
    
    # Remove screen if it was installed by us
    if dpkg -l | grep -q "screen"; then
        apt-get remove -y screen
    fi
    
    # Remove installation directory
    rm -rf "/opt/minecraft-server"
    
    # Remove symlink
    rm -f /usr/local/bin/mc-ui
    
    log "${GREEN}Uninstallation completed. All components have been removed.${NC}"
}

# Show help
show_help() {
    echo -e "\n${GREEN}Minecraft Server Management Script v${VERSION}${NC}"
    echo -e "\nUsage: mc-ui [command]"
    echo -e "\nCommands:"
    echo "  status        - Show server status and system information"
    echo "  install      - Install Minecraft server and requirements"
    echo "  start        - Start the server"
    echo "  stop         - Stop the server"
    echo "  restart      - Restart the server"
    echo "  backup       - Create a backup"
    echo "  restore      - Restore from a backup"
    echo "  web          - Setup/update web interface"
    echo "  uninstall    - Remove all components and configurations"
    echo "  help         - Show this help message"
}

# Interactive menu
show_menu() {
    clear
    echo -e "${GREEN}Minecraft Server Management Script v${VERSION}${NC}"
    echo -e "\nSelect an option:"
    echo "1) Show server status"
    echo "2) Install server"
    echo "3) Start server"
    echo "4) Stop server"
    echo "5) Restart server"
    echo "6) Create backup"
    echo "7) Restore backup"
    echo "8) Setup web interface"
    echo "9) Uninstall"
    echo "0) Exit"
    
    echo -n "Enter your choice: "
    read choice

    case $choice in
        1) check_system ;;
        2) check_root && install_requirements && install_server && setup_web_interface ;;
        3) start_server ;;
        4) stop_server ;;
        5) stop_server && start_server ;;
        6) create_backup ;;
        7) 
            echo -n "Enter backup file name: "
            read backup_file
            restore_backup "$backup_file"
            ;;
        8) check_root && setup_web_interface ;;
        9) 
            echo -e "${YELLOW}Warning: This will remove all server files, configurations, and backups.${NC}"
            read -p "Are you sure you want to continue? (y/N) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                uninstall
            else
                log "Uninstallation cancelled."
            fi
            ;;
        0) exit 0 ;;
        *) log "${RED}Invalid option${NC}" ;;
    esac

    echo -e "\nPress Enter to continue..."
    read
    show_menu
}

# Main script logic
if [ $# -eq 0 ]; then
    show_menu
else
    case "$1" in
        "status")
            check_system
            ;;
        "install")
            check_root
            install_requirements
            install_server
            setup_web_interface
            ;;
        "start")
            start_server
            ;;
        "stop")
            stop_server
            ;;
        "restart")
            stop_server
            start_server
            ;;
        "backup")
            create_backup
            ;;
        "restore")
            if [ -z "$2" ]; then
                log "${RED}Please specify backup file${NC}"
                exit 1
            fi
            restore_backup "$2"
            ;;
        "web")
            check_root
            setup_web_interface
            ;;
        "uninstall")
            check_root
            echo -e "${YELLOW}Warning: This will remove all server files, configurations, and backups.${NC}"
            read -p "Are you sure you want to continue? (y/N) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                uninstall
            else
                log "Uninstallation cancelled."
            fi
            ;;
        "help"|"")
            show_help
            ;;
        *)
            log "${RED}Unknown command: $1${NC}"
            show_help
            exit 1
            ;;
    esac
fi 